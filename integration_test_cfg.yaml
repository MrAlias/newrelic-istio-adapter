#
# Copyright 2019 New Relic Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: "config.istio.io/v1alpha2"
kind: instance
metadata:
  name: requestcount
  namespace: istio-system
spec:
  template: metric
  params:
    value: "1"
    dimensions:
      reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source", "destination")
      service.name: conditional((context.reporter.kind | "inbound") == "outbound", source.workload.name | "unknown", destination.workload.name | "unknown")
      source.workload: source.workload.name | "unknown"
      source.workload.namespace: source.workload.namespace | "unknown"
      source.principal: source.principal | "unknown"
      source.app: source.labels["app"] | "unknown"
      source.version: source.labels["version"] | "unknown"
      source.ip: source.ip | ip("0.0.0.0")
      destination.workload: destination.workload.name | "unknown"
      destination.workload.namespace: destination.workload.namespace | "unknown"
      destination.principal: destination.principal | "unknown"
      destination.app: destination.labels["app"] | "unknown"
      destination.version: destination.labels["version"] | "unknown"
      destination.service: destination.service.host | "unknown"
      destination.service.name: destination.service.name | "unknown"
      destination.service.namespace: destination.service.namespace | "unknown"
      request.protocol: api.protocol | context.protocol | "unknown"
      request.time: request.time | timestamp("2001-01-01T00:00:01+00:00")
      response.code: response.code | 200
      response.flags: context.proxy_error_code | "-"
      connection.securityPolicy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
      connection.mtls: connection.mtls | false
      connection.duration: connection.duration | "1s"
---
apiVersion: "config.istio.io/v1alpha2"
kind: instance
metadata:
  name: requestsize
  namespace: istio-system
spec:
  template: metric
  params:
    value: request.size | 0
    dimensions:
      reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source", "destination")
      service.name: conditional((context.reporter.kind | "inbound") == "outbound", source.workload.name | "unknown", destination.workload.name | "unknown")
      source.workload: source.workload.name | "unknown"
      source.workload.namespace: source.workload.namespace | "unknown"
      source.principal: source.principal | "unknown"
      source.app: source.labels["app"] | "unknown"
      source.version: source.labels["version"] | "unknown"
      source.ip: source.ip | ip("0.0.0.0")
      destination.workload: destination.workload.name | "unknown"
      destination.workload.namespace: destination.workload.namespace | "unknown"
      destination.principal: destination.principal | "unknown"
      destination.app: destination.labels["app"] | "unknown"
      destination.version: destination.labels["version"] | "unknown"
      destination.service: destination.service.host | "unknown"
      destination.service.name: destination.service.name | "unknown"
      destination.service.namespace: destination.service.namespace | "unknown"
      request.protocol: api.protocol | context.protocol | "unknown"
      request.time: request.time | timestamp("2001-01-01T00:00:01+00:00")
      response.code: response.code | 200
      response.flags: context.proxy_error_code | "-"
      connection.securityPolicy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
      connection.mtls: connection.mtls | false
      connection.duration: connection.duration | "1s"
---
apiVersion: "config.istio.io/v1alpha2"
kind: instance
metadata:
  name: requestduration
  namespace: istio-system
spec:
  template: metric
  params:
    value: response.duration | "0ms"
    dimensions:
      reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source", "destination")
      service.name: conditional((context.reporter.kind | "inbound") == "outbound", source.workload.name | "unknown", destination.workload.name | "unknown")
      source.workload: source.workload.name | "unknown"
      source.workload.namespace: source.workload.namespace | "unknown"
      source.principal: source.principal | "unknown"
      source.app: source.labels["app"] | "unknown"
      source.version: source.labels["version"] | "unknown"
      source.ip: source.ip | ip("0.0.0.0")
      destination.workload: destination.workload.name | "unknown"
      destination.workload.namespace: destination.workload.namespace | "unknown"
      destination.principal: destination.principal | "unknown"
      destination.app: destination.labels["app"] | "unknown"
      destination.version: destination.labels["version"] | "unknown"
      destination.service: destination.service.host | "unknown"
      destination.service.name: destination.service.name | "unknown"
      destination.service.namespace: destination.service.namespace | "unknown"
      request.protocol: api.protocol | context.protocol | "unknown"
      request.time: request.time | timestamp("2001-01-01T00:00:01+00:00")
      response.code: response.code | 200
      response.flags: context.proxy_error_code | "-"
      connection.securityPolicy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
      connection.mtls: connection.mtls | false
      connection.duration: connection.duration | "1s"
---
apiVersion: "config.istio.io/v1alpha2"
kind: instance
metadata:
  name: responsesize
  namespace: istio-system
spec:
  template: metric
  params:
    value: response.size | 0
    dimensions:
      reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source", "destination")
      service.name: conditional((context.reporter.kind | "inbound") == "outbound", source.workload.name | "unknown", destination.workload.name | "unknown")
      source.workload: source.workload.name | "unknown"
      source.workload.namespace: source.workload.namespace | "unknown"
      source.principal: source.principal | "unknown"
      source.app: source.labels["app"] | "unknown"
      source.version: source.labels["version"] | "unknown"
      source.ip: source.ip | ip("0.0.0.0")
      destination.workload: destination.workload.name | "unknown"
      destination.workload.namespace: destination.workload.namespace | "unknown"
      destination.principal: destination.principal | "unknown"
      destination.app: destination.labels["app"] | "unknown"
      destination.version: destination.labels["version"] | "unknown"
      destination.service: destination.service.host | "unknown"
      destination.service.name: destination.service.name | "unknown"
      destination.service.namespace: destination.service.namespace | "unknown"
      request.protocol: api.protocol | context.protocol | "unknown"
      request.time: request.time | timestamp("2001-01-01T00:00:01+00:00")
      response.code: response.code | 200
      response.flags: context.proxy_error_code | "-"
      connection.securityPolicy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
      connection.mtls: connection.mtls | false
      connection.duration: connection.duration | "1s"
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: newrelic-http
  namespace: istio-system
spec:
  match: (context.protocol == "http" || context.protocol == "grpc") && (match((request.useragent | "-"), "kube-probe*") == false)
  actions:
  - handler: newrelic
    instances:
    - requestcount
    - requestsize
    - requestduration
    - responsesize
---
apiVersion: "config.istio.io/v1alpha2"
kind: handler
metadata:
 name: newrelic
 namespace: istio-system
spec:
  adapter: newrelic
  connection:
    address: "%s"
  params:
    namespace: istio
    metrics:
      requestduration.instance.istio-system:
        name: request.duration.seconds
        type: SUMMARY
      requestsize.instance.istio-system:
        name: request.bytes
        type: GAUGE
      requestcount.instance.istio-system:
        name: request.total
        type: COUNT
      responsesize.instance.istio-system:
        name: response.bytes
        type: GAUGE
---
